@model IEnumerable<RealEstate.Persistance.Models.dbo.PropiedadesModel>

@{
    ViewData["Title"] = "Mis Propiedades";
}

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" />

    <style>
        :root {
            --primary-color: #4361ee;
            --secondary-color: #3f37c9;
            --accent-color: #f72585;
            --light-color: #f8f9fa;
            --dark-color: #212529;
            --sold-color: #6c757d;
            --available-color: #4cc9f0;
            --reserved-color: #f8961e;
            --gradient-primary: linear-gradient(135deg, #4361ee 0%, #3f37c9 100%);
            --gradient-accent: linear-gradient(135deg, #f72585 0%, #b5179e 100%);
        }

        /* Hero Section with Cover Image */
        .hero-section {
            background: url('https://images.unsplash.com/photo-1560518883-ce09059eeffa?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2073&q=80') no-repeat center center;
            background-size: cover;
            height: 400px;
            border-radius: 20px;
            position: relative;
            overflow: hidden;
            margin-bottom: 3rem;
            box-shadow: 0 15px 30px rgba(0,0,0,0.1);
        }

        .hero-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.4);
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            color: white;
            padding: 2rem;
        }

        .hero-content {
            max-width: 800px;
            z-index: 2;
        }

        .hero-title {
            font-size: 3.5rem;
            font-weight: 800;
            margin-bottom: 1.5rem;
            text-shadow: 2px 2px 8px rgba(0,0,0,0.5);
        }

        .hero-subtitle {
            font-size: 1.5rem;
            margin-bottom: 2rem;
            text-shadow: 1px 1px 4px rgba(0,0,0,0.5);
        }

        /* Property Cards */
        .property-card {
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            border: none;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0,0,0,0.08);
            position: relative;
            margin-bottom: 30px;
            background: white;
        }

            .property-card:hover {
                transform: translateY(-15px) scale(1.02);
                box-shadow: 0 25px 50px rgba(67,97,238,0.2);
            }

            .property-card.sold {
                opacity: 0.9;
            }

                .property-card.sold::after {
                    content: "";
                    position: absolute;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    background-color: rgba(108, 117, 125, 0.1);
                    z-index: 1;
                }

        .property-badge {
            position: absolute;
            top: 20px;
            left: 20px;
            font-size: 0.9rem;
            font-weight: 700;
            padding: 0.5rem 1.2rem;
            border-radius: 50px;
            z-index: 3;
            box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        }

            .property-badge.casa {
                background: var(--gradient-primary);
                color: white;
            }

            .property-badge.departamento {
                background: var(--gradient-accent);
                color: white;
            }

            .property-badge.terreno {
                background: linear-gradient(135deg, #4895ef 0%, #4361ee 100%);
                color: white;
            }

            .property-badge.oficina {
                background: linear-gradient(135deg, #3a0ca3 0%, #7209b7 100%);
                color: white;
            }

        .img-container {
            height: 250px;
            overflow: hidden;
            position: relative;
        }

            .img-container img {
                transition: transform 0.8s ease;
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

        .property-card:hover .img-container img {
            transform: scale(1.15);
        }

        .price-tag {
            position: absolute;
            bottom: 20px;
            left: 20px;
            background-color: white;
            padding: 0.6rem 1.2rem;
            border-radius: 50px;
            font-weight: 800;
            color: var(--primary-color);
            box-shadow: 0 5px 15px rgba(0,0,0,0.15);
            z-index: 3;
            font-size: 1.1rem;
        }

            .price-tag.sold {
                color: var(--sold-color);
                text-decoration: line-through;
            }

            .price-tag.reserved {
                color: var(--reserved-color);
            }

        .card-body {
            padding: 2rem;
            position: relative;
            z-index: 2;
        }

        .card-title {
            font-weight: 800;
            color: var(--dark-color);
            margin-bottom: 0.75rem;
            font-size: 1.4rem;
        }

        .location {
            color: #6c757d;
            margin-bottom: 1.2rem;
            display: flex;
            align-items: center;
            font-size: 1rem;
        }

            .location i {
                margin-right: 0.5rem;
                color: var(--accent-color);
                font-size: 1.2rem;
            }

        .description {
            color: #6c757d;
            font-size: 1rem;
            margin-bottom: 1.8rem;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
            line-height: 1.6;
        }

        .features-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .feature-item {
            display: flex;
            align-items: center;
            transition: all 0.3s ease;
        }

            .feature-item:hover {
                transform: translateX(5px);
            }

        .feature-icon {
            width: 40px;
            height: 40px;
            background: rgba(67,97,238,0.1);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            color: var(--primary-color);
            font-size: 1.1rem;
            transition: all 0.3s ease;
        }

        .feature-item:hover .feature-icon {
            background: var(--primary-color);
            color: white;
            transform: rotate(10deg);
        }

        .feature-text {
            font-size: 0.95rem;
        }

            .feature-text .label {
                color: #6c757d;
                display: block;
                font-size: 0.85rem;
                margin-bottom: 0.2rem;
            }

            .feature-text .value {
                font-weight: 700;
                color: var(--dark-color);
                font-size: 1.1rem;
            }

        .card-footer {
            background: transparent;
            border-top: none;
            padding: 0 2rem 2rem;
            position: relative;
            z-index: 2;
            display: flex;
            justify-content: space-between;
        }

        .btn-details {
            background: var(--gradient-primary);
            color: white;
            border-radius: 12px;
            padding: 0.8rem 2rem;
            font-weight: 700;
            transition: all 0.3s ease;
            border: none;
            box-shadow: 0 5px 15px rgba(67,97,238,0.3);
        }

            .btn-details:hover {
                transform: translateY(-3px);
                box-shadow: 0 8px 25px rgba(67,97,238,0.4);
            }

        .btn-favorite {
            background: white;
            color: var(--accent-color);
            border: 2px solid var(--accent-color);
            border-radius: 12px;
            padding: 0.8rem 1.5rem;
            font-weight: 700;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(247,37,133,0.1);
        }

            .btn-favorite:hover {
                background: var(--gradient-accent);
                color: white;
                transform: translateY(-3px);
                box-shadow: 0 8px 25px rgba(247,37,133,0.3);
                border-color: transparent;
            }

        .status-badge {
            position: absolute;
            top: 20px;
            right: 20px;
            font-size: 0.9rem;
            font-weight: 700;
            padding: 0.5rem 1.2rem;
            border-radius: 50px;
            z-index: 3;
            color: white;
            box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        }

            .status-badge.available {
                background: linear-gradient(135deg, #4cc9f0 0%, #4895ef 100%);
            }

            .status-badge.sold {
                background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
            }

            .status-badge.reserved {
                background: linear-gradient(135deg, #f8961e 0%, #f3722c 100%);
            }

        /* No Properties Section */
        .no-properties {
            text-align: center;
            padding: 6rem 0;
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.05);
            margin: 3rem 0;
        }

            .no-properties i {
                font-size: 6rem;
                color: rgba(67,97,238,0.1);
                margin-bottom: 2rem;
            }

            .no-properties h3 {
                color: var(--dark-color);
                font-weight: 800;
                margin-bottom: 1.5rem;
                font-size: 2rem;
            }

            .no-properties p {
                color: #6c757d;
                margin-bottom: 3rem;
                max-width: 500px;
                margin-left: auto;
                margin-right: auto;
                font-size: 1.1rem;
                line-height: 1.6;
            }

        .btn-refresh {
            background: var(--gradient-primary);
            color: white;
            border-radius: 12px;
            padding: 1rem 2.5rem;
            font-weight: 700;
            transition: all 0.3s ease;
            border: none;
            box-shadow: 0 5px 15px rgba(67,97,238,0.3);
            font-size: 1.1rem;
        }

            .btn-refresh:hover {
                transform: translateY(-3px);
                box-shadow: 0 8px 25px rgba(67,97,238,0.4);
            }

        /* Responsive Adjustments */
        @@media (max-width: 992px) {
            .hero-title {
                font-size: 2.8rem;
            }

            .hero-subtitle {
                font-size: 1.3rem;
            }
        }

        @@media (max-width: 768px) {
            .hero-section {
                height: 350px;
            }

            .hero-title {
                font-size: 2.2rem;
            }

            .hero-subtitle {
                font-size: 1.1rem;
            }

            .property-card {
                margin-bottom: 20px;
            }

            .img-container {
                height: 220px;
            }
        }

        @@media (max-width: 576px) {
            .hero-section {
                height: 300px;
                border-radius: 15px;
            }

            .hero-title {
                font-size: 1.8rem;
                margin-bottom: 1rem;
            }

            .hero-subtitle {
                font-size: 1rem;
                margin-bottom: 1.5rem;
            }

            .card-body, .card-footer {
                padding: 1.5rem;
            }

            .features-grid {
                gap: 1rem;
            }
        }

        /* Floating Action Button */
        .fab {
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 60px;
            height: 60px;
            background: var(--gradient-primary);
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            box-shadow: 0 10px 25px rgba(67,97,238,0.4);
            z-index: 100;
            transition: all 0.3s ease;
        }

            .fab:hover {
                transform: translateY(-5px) scale(1.1);
                box-shadow: 0 15px 35px rgba(67,97,238,0.5);
            }
    </style>
}

<!-- Hero Section with Cover Image -->
<div class="hero-section">
    <div class="hero-overlay">
        <div class="hero-content">
            <h1 class="hero-title"><i class="fas fa-home me-3"></i>Mis Propiedades</h1>
            <p class="hero-subtitle">Administra y visualiza todas tus propiedades registradas en un solo lugar</p>
        </div>
    </div>
</div>

<div class="container">
    <!-- Alert Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show mb-4" role="alert">
            <div class="d-flex align-items-center">
                <i class="fas fa-check-circle me-3 fs-4"></i>
                <div>@TempData["SuccessMessage"]</div>
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-warning alert-dismissible fade show mb-4" role="alert">
            <div class="d-flex align-items-center">
                <i class="fas fa-exclamation-triangle me-3 fs-4"></i>
                <div>@TempData["ErrorMessage"]</div>
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Properties Listing -->
    @if (Model == null || !Model.Any())
    {
        <div class="no-properties">
            <i class="fas fa-home"></i>
            <h3>No tienes propiedades registradas</h3>
            <p>Comienza agregando tu primera propiedad para mostrarla en tu portafolio. Haz clic en el botón "Agregar Propiedad" para comenzar.</p>
            <a href="#" class="btn btn-refresh">
                <i class="fas fa-plus me-2"></i> Agregar Propiedad
            </a>
        </div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var item in Model)
            {
                var isSold = item.Vendida.HasValue && item.Vendida.Value;
                var isAvailable = item.Disponibilidad && !isSold;
                var statusClass = isSold ? "sold" : (item.Disponibilidad ? "available" : "reserved");
                var statusText = isSold ? "Vendida" : (item.Disponibilidad ? "Disponible" : "Reservada");

                <div class="col">
                    <div class="property-card card h-100 @(isSold ? "sold" : "")">
                        <div class="img-container">
                            <img src="@(string.IsNullOrEmpty(item.Imagen) ? "https://images.unsplash.com/photo-1568605114967-8130f3a36994?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80" : item.Imagen)"
                                 class="card-img-top"
                                 alt="@item.Titulo" />
                            @{
                                var tipoPropiedadMap = new Dictionary<int, string>
                    {
                    {1, "Casa"},
                    {2, "Apartamento"},
                    {3, "Terreno"},
                    };
                            }

                            <span class="property-badge @(tipoPropiedadMap.ContainsKey(item.TipoPropiedad) ? tipoPropiedadMap[item.TipoPropiedad].ToLower() : "desconocido")">
                                @(tipoPropiedadMap.ContainsKey(item.TipoPropiedad) ? tipoPropiedadMap[item.TipoPropiedad] : "Desconocido")
                            </span>
                            <span class="status-badge @statusClass">@statusText</span>
                            <span class="price-tag @(isSold ? "sold" : (!item.Disponibilidad ? "reserved" : ""))">RD$ @item.Precio.ToString("N0")</span>
                        </div>

                        <div class="card-body">
                            <h5 class="card-title">@item.Titulo</h5>
                            <div class="location">
                                <i class="fas fa-map-marker-alt"></i>
                                <span>@item.Direccion, @item.Ciudad</span>
                            </div>
                            <p class="codigo text-muted small mb-3">Código: @item.Codigo</p>
                            <p class="description">@item.Descripcion</p>

                            <div class="features-grid">
                                <div class="feature-item">
                                    <div class="feature-icon">
                                        <i class="fas fa-bed"></i>
                                    </div>
                                    <div class="feature-text">
                                        <span class="label">Habitaciones</span>
                                        <span class="value">@item.Habitaciones</span>
                                    </div>
                                </div>

                                <div class="feature-item">
                                    <div class="feature-icon">
                                        <i class="fas fa-bath"></i>
                                    </div>
                                    <div class="feature-text">
                                        <span class="label">Baños</span>
                                        <span class="value">@item.Baños</span>
                                    </div>
                                </div>

                                <div class="feature-item">
                                    <div class="feature-icon">
                                        <i class="fas fa-car"></i>
                                    </div>
                                    <div class="feature-text">
                                        <span class="label">Parqueos</span>
                                        <span class="value">@item.Parqueos</span>
                                    </div>
                                </div>

                                <div class="feature-item">
                                    <div class="feature-icon">
                                        <i class="fas fa-ruler-combined"></i>
                                    </div>
                                    <div class="feature-text">
                                        <span class="label">Área</span>
                                        <span class="value">@item.TamañoTerreno.ToString("N2") m²</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Floating Action Button -->
<a href="#" class="fab">
    <i class="fas fa-plus"></i>
</a>

@section Scripts {
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        // Animation for cards when they come into view
        document.addEventListener('DOMContentLoaded', function() {
            const cards = document.querySelectorAll('.property-card');

            cards.forEach((card, index) => {
                // Add delay based on index for staggered animation
                card.style.transitionDelay = `${index * 0.1}s`;
                card.style.opacity = '0';
                card.style.transform = 'translateY(20px)';

                // Intersection Observer to animate when card comes into view
                const observer = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            entry.target.style.opacity = '1';
                            entry.target.style.transform = 'translateY(0)';
                        }
                    });
                }, { threshold: 0.1 });

                observer.observe(card);
            });
        });
    </script>
}