@model List<RealEstate.Persistance.Models.dbo.TiposVentaModel>
@{
    ViewData["Title"] = "Gestión de Tipos de Venta Inmobiliaria";
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* Estilos CSS se mantienen iguales */
        .btn-green {
            background-color: #28a745;
            color: white;
        }

        .btn-red {
            background-color: #dc3545;
            color: white;
        }

        :root {
            --primary: #2c3e50;
            --secondary: #3498db;
            --accent: #e74c3c;
            --light: #ecf0f1;
            --dark: #1a252f;
            --success: #2ecc71;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Montserrat', sans-serif;
        }

        body {
            background-color: #f5f7fa;
            color: var(--dark);
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        }

        .logo {
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--primary);
            display: flex;
            align-items: center;
        }

            .logo i {
                color: var(--accent);
                margin-right: 0.5rem;
            }

        .actions {
            display: flex;
            gap: 1rem;
        }

        .btn {
            padding: 0.7rem 1.5rem;
            border-radius: 30px;
            border: none;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background-color: var(--secondary);
            color: white;
        }

            .btn-primary:hover {
                background-color: #2980b9;
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            }

        .btn-outline {
            background-color: transparent;
            border: 2px solid var(--secondary);
            color: var(--secondary);
        }

            .btn-outline:hover {
                background-color: var(--secondary);
                color: white;
            }

        .card {
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.05);
            overflow: hidden;
            margin-bottom: 2rem;
        }

        .card-header {
            padding: 1.5rem;
            background-color: var(--primary);
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .card-title {
            font-size: 1.4rem;
            font-weight: 600;
        }

        .search-bar {
            position: relative;
            width: 300px;
        }

            .search-bar input {
                width: 100%;
                padding: 0.7rem 1rem 0.7rem 2.5rem;
                border-radius: 30px;
                border: none;
                background-color: rgba(255, 255, 255, 0.2);
                color: white;
                transition: all 0.3s ease;
            }

                .search-bar input::placeholder {
                    color: rgba(255, 255, 255, 0.7);
                }

                .search-bar input:focus {
                    outline: none;
                    background-color: rgba(255, 255, 255, 0.3);
                }

            .search-bar i {
                position: absolute;
                left: 1rem;
                top: 50%;
                transform: translateY(-50%);
                color: white;
            }

        .table-responsive {
            overflow-x: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        thead {
            background-color: var(--light);
        }

        th, td {
            padding: 1.2rem 1.5rem;
            text-align: left;
        }

        th {
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.8rem;
            letter-spacing: 0.5px;
            color: #7f8c8d;
        }

        tbody tr {
            border-bottom: 1px solid #eee;
            transition: all 0.3s ease;
        }

            tbody tr:hover {
                background-color: #f8f9fa;
            }

        .actions-cell {
            display: flex;
            gap: 0.7rem;
        }

        .action-btn {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
            color: white;
        }

        .edit-btn {
            background-color: var(--secondary);
        }

        .delete-btn {
            background-color: var(--accent);
        }

        .view-btn {
            background-color: #7f8c8d;
        }

        .action-btn:hover {
            transform: scale(1.1);
        }

        .pagination {
            display: flex;
            justify-content: flex-end;
            gap: 0.5rem;
            padding: 1.5rem;
        }

        .page-btn {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            background-color: white;
            border: 1px solid #ddd;
            transition: all 0.3s ease;
        }

            .page-btn.active {
                background-color: var(--secondary);
                color: white;
                border-color: var(--secondary);
            }

            .page-btn:hover:not(.active) {
                background-color: #f1f1f1;
            }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--dark);
        }

        .form-control:focus {
            outline: none;
            border-color: var(--secondary);
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
        }

        @@media (max-width: 768px) {
            header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }

            .search-bar {
                width: 100%;
            }

            th, td {
                padding: 0.8rem;
            }
        }
    </style>
</head>
<body>
    @Html.AntiForgeryToken()
    <div class="container">
        <header>
            <div class="logo">
                <i class="fas fa-building"></i>
                <span>RealEstate</span>
            </div>
        </header>

        <!-- Alert Messages -->
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show mb-4" role="alert">
                <div class="d-flex align-items-center">
                    <i class="fas fa-check-circle me-3 fs-4"></i>
                    <div>@TempData["SuccessMessage"]</div>
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-warning alert-dismissible fade show mb-4" role="alert">
                <div class="d-flex align-items-center">
                    <i class="fas fa-exclamation-triangle me-3 fs-4"></i>
                    <div>@TempData["ErrorMessage"]</div>
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <button type="button" class="btn btn-primary mb-4" data-bs-toggle="modal" data-bs-target="#crearTipoVentaModal">
            <i class="fas fa-plus-circle me-2"></i>Agregar Tipo de Venta
        </button>

        <div class="card">
            <div class="card-header">
                <h2 class="card-title">Lista de Tipos de Venta</h2>
                <div class="search-bar">
                    <i class="fas fa-search"></i>
                    <input type="text" placeholder="Buscar tipos de venta..." id="searchInput">
                </div>
            </div>

            <div class="table-responsive">
                <table>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Nombre</th>
                            <th>Descripción</th>
                            <th>Propiedades Asociadas</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null && Model.Any())
                        {
                            @foreach (var tipoVenta in Model)
                            {
                                <tr>
                                    <td>@tipoVenta.TipoVentaID</td>
                                    <td>@tipoVenta.Nombre</td>
                                    <td>@tipoVenta.Descripcion</td>
                                    <td>@tipoVenta.PropiedadesAsociadas</td>
                                    <td class="actions-cell">
                                        <button class="action-btn delete-btn" title="Eliminar" onclick="confirmarEliminacion(event, '@tipoVenta.TipoVentaID')">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                        <button class="action-btn edit-btn" title="Editar" onclick="cargarDatosParaEditar('@tipoVenta.TipoVentaID', '@tipoVenta.Nombre', '@tipoVenta.Descripcion')">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="5" style="text-align: center; padding: 2rem;">
                                    <i class="fas fa-info-circle" style="color: var(--secondary); font-size: 1.5rem;"></i>
                                    <p style="margin-top: 1rem;">No se encontraron tipos de venta registrados</p>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Modal para crear tipo de venta -->
    <div class="modal fade" id="crearTipoVentaModal" tabindex="-1" aria-labelledby="crearTipoVentaModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="crearTipoVentaModalLabel">
                        <i class="fas fa-handshake me-2"></i>Nuevo Tipo de Venta
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                @using (Html.BeginForm("Create", "TiposVenta", FormMethod.Post, new { id = "formCrearTipoVenta" }))
                {
                    <div class="modal-body">
                        <div class="row g-3">
                            <!-- Nombre -->
                            <div class="col-md-12">
                                <label for="nombre" class="form-label">Nombre del Tipo de Venta</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-tag"></i></span>
                                    @Html.TextBox("Nombre", null, new { @class = "form-control", placeholder = "Ej: Venta, Alquiler, Traspaso, etc.", required = "required" })
                                </div>
                            </div>

                            <!-- Descripción -->
                            <div class="col-md-12">
                                <label for="descripcion" class="form-label">Descripción</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-align-left"></i></span>
                                    @Html.TextArea("Descripcion", null, new { @class = "form-control", placeholder = "Descripción detallada del tipo de venta...", rows = "3", required = "required" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                            <i class="fas fa-times me-2"></i>Cancelar
                        </button>
                        <button type="submit" class="btn btn-primary" id="btnCrearTipoVenta">
                            <i class="fas fa-save me-2"></i>Guardar Tipo de Venta
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Modal para Editar Tipo de Venta -->
    <div class="modal fade" id="editarTipoVentaModal" tabindex="-1" aria-labelledby="editarTipoVentaModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="editarTipoVentaModalLabel">
                        <i class="fas fa-edit me-2"></i>Editar Tipo de Venta
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                @using (Html.BeginForm("Edit", "TiposVenta", FormMethod.Post, new { id = "formEditarTipoVenta" }))
                {
                    <div class="modal-body">
                        <input type="hidden" id="editarTipoVentaID" name="TipoVentaID" />
                        <div class="row g-3">
                            <!-- Nombre -->
                            <div class="col-md-12">
                                <label for="editarNombre" class="form-label">Nombre del Tipo de Venta</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-tag"></i></span>
                                    <input type="text" class="form-control" id="editarNombre" name="Nombre" placeholder="Ej: Venta, Alquiler, Traspaso, etc." required>
                                </div>
                            </div>

                            <!-- Descripción -->
                            <div class="col-md-12">
                                <label for="editarDescripcion" class="form-label">Descripción</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-align-left"></i></span>
                                    <textarea class="form-control" id="editarDescripcion" name="Descripcion" rows="3" placeholder="Descripción detallada del tipo de venta..." required></textarea>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                            <i class="fas fa-times me-2"></i>Cancelar
                        </button>
                        <button type="submit" class="btn btn-primary" id="btnEditarTipoVenta">
                            <i class="fas fa-save me-2"></i>Guardar Cambios
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        $(document).ready(function () {
            // Búsqueda en tiempo real
            $('#searchInput').on('input', function () {
                const searchTerm = $(this).val().toLowerCase();
                $('tbody tr').each(function () {
                    const rowText = $(this).text().toLowerCase();
                    $(this).toggle(rowText.includes(searchTerm));
                });
            });

            // Validación del formulario antes de enviar
            $('#formCrearTipoVenta').submit(function (e) {
                // Mostrar spinner en el botón de enviar
                $('#btnCrearTipoVenta').html('<i class="fas fa-spinner fa-spin me-2"></i>Guardando...');
                return true;
            });

            // Resetear el formulario cuando se cierra el modal
            $('#crearTipoVentaModal').on('hidden.bs.modal', function () {
                $(this).find('form')[0].reset();
                $('#btnCrearTipoVenta').html('<i class="fas fa-save me-2"></i>Guardar Tipo de Venta');
            });
        });

        function confirmarEliminacion(event, tipoVentaId) {
            event.preventDefault();

            Swal.fire({
                title: "¿Estás seguro?",
                text: "Esta acción eliminará permanentemente el tipo de venta.",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Sí, eliminar",
                cancelButtonText: "Cancelar"
            }).then((result) => {
                if (result.isConfirmed) {
                    // Crear formulario dinámico
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '/TiposVenta/Delete';

                    const idInput = document.createElement('input');
                    idInput.type = 'hidden';
                    idInput.name = 'TipoVentaID';
                    idInput.value = tipoVentaId;
                    form.appendChild(idInput);

                    const token = document.querySelector('input[name="__RequestVerificationToken"]').cloneNode();
                    form.appendChild(token);

                    document.body.appendChild(form);
                    form.submit();
                }
            });
        }

        // Función para cargar datos en el modal de edición
        function cargarDatosParaEditar(tipoVentaID, nombre, descripcion) {
            // Decodificar las cadenas (por si tienen caracteres especiales)
            const nombreDecoded = decodeHtmlEntities(nombre);
            const descripcionDecoded = decodeHtmlEntities(descripcion);

            // Asignar valores a los campos del modal
            document.getElementById('editarTipoVentaID').value = tipoVentaID;
            document.getElementById('editarNombre').value = nombreDecoded;
            document.getElementById('editarDescripcion').value = descripcionDecoded;

            // Mostrar el modal
            const modal = new bootstrap.Modal(document.getElementById('editarTipoVentaModal'));
            modal.show();
        }

        // Función auxiliar para decodificar HTML entities
        function decodeHtmlEntities(text) {
            const textArea = document.createElement('textarea');
            textArea.innerHTML = text;
            return textArea.value;
        }

        // Manejar el envío del formulario de edición
        document.getElementById('formEditarTipoVenta').addEventListener('submit', function (e) {
            e.preventDefault();

            // Mostrar spinner
            const submitBtn = document.getElementById('btnEditarTipoVenta');
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Guardando...';
            submitBtn.disabled = true;

            // Enviar el formulario
            this.submit();
        });

        // Resetear el modal cuando se cierra
        document.getElementById('editarTipoVentaModal').addEventListener('hidden.bs.modal', function () {
            const submitBtn = document.getElementById('btnEditarTipoVenta');
            submitBtn.innerHTML = '<i class="fas fa-save me-2"></i>Guardar Cambios';
            submitBtn.disabled = false;
        });
    </script>
</body>
</html>