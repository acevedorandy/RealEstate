@using System.Security.Claims
@model IEnumerable<RealEstate.Persistance.Models.dbo.MensajesModel> 
@{
    ViewData["Title"] = "Chat";
    var currentUserId = User.FindFirstValue(ClaimTypes.NameIdentifier);
}

@section Styles {
    <style>
        .chat-container {
            max-width: 800px;
            margin: 2rem auto;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            background-color: #fff;
        }

        .chat-header {
            background: linear-gradient(135deg, #4361ee 0%, #3f37c9 100%);
            color: white;
            padding: 1.5rem;
            text-align: center;
        }

            .chat-header h3 {
                margin: 0;
                font-weight: 600;
            }

        .chat-messages {
            height: 500px;
            overflow-y: auto;
            padding: 1.5rem;
            background-color: #f8f9fa;
        }

        .message {
            max-width: 70%;
            margin-bottom: 1.5rem;
            padding: 1rem;
            border-radius: 12px;
            position: relative;
            word-wrap: break-word;
        }

            .message.sent {
                background-color: #4361ee;
                color: white;
                margin-left: auto;
                border-bottom-right-radius: 0;
            }

            .message.received {
                background-color: #e9ecef;
                color: #212529;
                margin-right: auto;
                border-bottom-left-radius: 0;
            }

            .message small {
                display: block;
                font-size: 0.75rem;
                opacity: 0.8;
                margin-top: 0.5rem;
            }

            .message.sent small {
                color: rgba(255,255,255,0.7);
            }

            .message.received small {
                color: rgba(33,37,41,0.6);
            }

            .message .badge {
                position: absolute;
                top: -10px;
                right: -10px;
                font-size: 0.65rem;
                padding: 0.25rem 0.5rem;
            }

        .chat-input {
            padding: 1.5rem;
            background-color: #fff;
            border-top: 1px solid #e9ecef;
        }

            .chat-input form {
                display: flex;
                gap: 0.5rem;
            }

            .chat-input input[type="text"] {
                flex: 1;
                padding: 0.75rem 1rem;
                border: 1px solid #dee2e6;
                border-radius: 8px;
                font-size: 1rem;
            }

                .chat-input input[type="text"]:focus {
                    outline: none;
                    border-color: #4361ee;
                    box-shadow: 0 0 0 3px rgba(67,97,238,0.2);
                }

            .chat-input button {
                background: linear-gradient(135deg, #4361ee 0%, #3f37c9 100%);
                color: white;
                border: none;
                padding: 0 1.5rem;
                border-radius: 8px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.3s ease;
            }

                .chat-input button:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 5px 15px rgba(67,97,238,0.3);
                }

        @@media (max-width: 768px) {
            .chat-messages {
                height: 400px;
            }
            
            .message {
                max-width: 85%;
            }
        }
    </style>
}

<div class="chat-container">
    <div class="chat-header">
        <h3>Chat sobre la propiedad @ViewBag.PropiedadId</h3>
    </div>

    <div class="chat-messages" id="chat-messages">
        @if (Model != null && Model.Any())
        {
            foreach (var mensaje in Model)
            {
                <div class="message @(mensaje.RemitenteID == currentUserId ? "sent" : "received")" data-id="@mensaje.MensajeID">
                    <p>@mensaje.Mensaje</p>
                    <small>@mensaje.Enviado.ToString("g")</small>
                    @if (mensaje.RemitenteID != currentUserId && !mensaje.Visto)
                    {
                        <span class="badge badge-primary">Nuevo</span>
                    }
                </div>
            }
        }
        else
        {
            <div class="text-center py-5 text-muted">
                <i class="fas fa-comments fa-3x mb-3"></i>
                <p>No hay mensajes en este chat</p>
                <p>Envía un mensaje para iniciar la conversación</p>
            </div>
        }
    </div>

    <div class="chat-input">
        <form asp-action="Enviar" method="post">
            <input type="hidden" name="propiedadId" value="@ViewBag.PropiedadId" />
            <input type="hidden" name="destinatarioId" value="@Model?.FirstOrDefault(m => m.RemitenteID != currentUserId)?.RemitenteID" />
            <input type="text" name="contenido" placeholder="Escribe tu mensaje..." required />
            <button type="submit">
                <i class="fas fa-paper-plane me-1"></i> Enviar
            </button>
        </form>
    </div>
</div>

@section Scripts {
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <script>
        $(document).ready(function() {
            // Scroll al final del chat
            var messagesContainer = $('#chat-messages');
            messagesContainer.scrollTop(messagesContainer[0].scrollHeight);

            // Marcar mensajes como vistos
            $('.message.received').each(function() {
                if ($(this).find('.badge').length > 0) {
                    var mensajeId = $(this).data('id');
                    $.post('@Url.Action("MarcarComoVisto", "Chat")', { mensajeId: mensajeId }, function() {
                        $(this).find('.badge').remove();
                    }.bind(this));
                }
            });

            // Opcional: Configurar SignalR para chat en tiempo real
            // const connection = new signalR.HubConnectionBuilder()
            //     .withUrl("/chatHub")
            //     .configureLogging(signalR.LogLevel.Information)
            //     .build();
            
            // connection.start().catch(err => console.error(err.toString()));
        });
    </script>
}